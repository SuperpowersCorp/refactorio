settings:
  target: ../example-data
examples:
- pre: "Current help output at screenshot generation time"
  name: "help"
  version: 0
  cmd: "stack exec refactorio -- --help"
- pre: "Increment the value at key 'baz' by 1962."
  name: "json"
  version: 0
  cmd: "stack exec refactorio -- -t $TARGET -p --json '& key \"baz\" . _Number *~ 42'"
- pre: "Multiply the value of the key 'baz' by 10."
  name: yaml
  version: 0
  cmd: "stack exec refactorio -- -t $TARGET/src/a.yaml -p --yaml '& H.yaml . key \"baz\" . _Number +~ 2112'"
- pre: "HTML example coming soon."
  name: html
  version: 0
  cmd: "stack exec refactorio -- -t $TARGET -p --html '& html . node \"fixme\" %~ toUpper'"
- pre: "C'mon, you've never needed to \"find all the authors with names longer than 15 characters and then sort all of the letters in their name that are above 'm' in place?\" Pshaw."
  name: xml
  version: 0
  cmd: "stack exec refactorio -- -t $TARGET -p --xml '& convertTo(a::LByteString) . xml . node \"book\" . node \"author\" . text . filtered ((>12) . Text.length) . partsOf (each.filtered (>Prelude.head \"m\")) %~ sort'"
- pre: "Drop regex's in anywhere you like, eg. \"uppercase and reverse the characters in the value of the JSON object at this key that match this regular expression\":"
  name: regex
  version: 0
  cmd: "stack exec refactorio -- -t $TARGET -p --json '& key \"foo\" . _String . Text.unpacked . regex [|ba|] . matchedString %~ reverse . map Char.toUpper'"
- pre: "Reach inside eg. gzipped files and do what you gotta do:"
  post: "(Not sure what's up with that \"trailing garbage.\")"
  name: zlib
  version: 0
  cmd: "cat $TARGET/b.json.gz | stack exec refactorio -- -t - --json '& lazy . from Z.gzipped . from lazy . key \"baz\" . _Number *~ 85' | gzcat -"
- name: hs-ints
  version: 0
  cmd: "stack exec refactorio -- -t $TARGET --search --haskell _Module.biplate._Int"
- name: hs-modname
  version: 0
  cmd: "stack exec refactorio -- -t $TARGET --search --haskell _Module.biplate._ModuleName.end"
- name: hs-string
  version: 0
  cmd: "stack exec refactorio -- --haskell --search _Module.biplate._String.end"
- name: hs-fieldupdate
  version: 0
  cmd: "stack exec refactorio -- --haskell --search _Module.biplate._FieldUpdate.end"
- name: hs-frac
  version: 0
  cmd: "stack exec refactorio -- --haskell --search _Module.biplate._Frac.end"
- name: hs-odd-ints
  version: 0
  cmd: "stack exec refactorio -- --haskell --search '_Module.biplate._Int.filtered(odd.view target).end'"
- name: hs-ints-gt-10
  version: 0
  cmd: "stack exec refactorio -- --haskell --search '_Module.biplate._Int.filtered((>10).view target).end'"
